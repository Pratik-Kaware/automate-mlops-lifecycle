name: MLCI-Pipeline 

on: 
  push:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'README.md'
      - 'project-flow.txt'
      - '**.rst'

jobs: 
  project-testing:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: List files after checkout
      run: |
        pwd
        ls -R

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip- 

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: run dvc pipeline
      env: 
        DAGSHUB_TOKEN: ${{ secrets.TEST_ENV }}
      run: dvc repro

    - name: Run model tests
      env:
        DAGSHUB_TOKEN: ${{ secrets.TEST_ENV }}
      run: |
        python -m unittest tests/test_model.py

    - name: Promote model to production
      if: success()
      env:
        DAGSHUB_TOKEN: ${{ secrets.TEST_ENV }}
      run: python scripts/promote_model.py

    - name: Run Flask app tests
      if: success()
      env:
        DAGSHUB_TOKEN: ${{ secrets.TEST_ENV }}
      run: python -m unittest tests/test_flask_app.py

    - name: Upload build context
      uses: actions/upload-artifact@v4
      with:
        name: build-context
        path: .
  
  Containerize:
    
    needs: project-testing
    runs-on: ubuntu-latest
    steps:
  
    - name: Download build context
      uses: actions/download-artifact@v4
      with:
        name: build-context
    
    - name: List files after download
      run: |
        pwd
        ls -R

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to AWS ECR
      if: success()
      run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Build Docker image
      run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .

    - name: Tag Docker image
      run: |
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

  
    - name: Check Docker Authentication
      run: docker info

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

  Deploy-to-eks:

    needs: Containerize
    runs-on: ubuntu-latest
  
    steps:
  
      - name: Checkout code
        uses: actions/checkout@v4

      - name: setup kubectl 
        uses: azure/setup-kubectl@v3
        with: 
          version: 'latest'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Kubeconfig
        run: | 
          aws eks update-kubeconfig --region ap-south-1 --name imdb-predict-cluster

      - name: Create k8s secret
        run: |
         kubectl create secret generic test-env \
            --from-literal=TEST_ENV=${{ secrets.TEST_ENV }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Update the deployment.yaml 
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          sed -i "s|IMAGE_PLACEHOLDER|$IMAGE_URI|g" deployment.yaml

      - name: Deploy to EKS
        run: |
          kubectl apply -f deployment.yaml